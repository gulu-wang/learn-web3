{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// TODO\r\n// 1. 创建一个收款函数\r\n// 2. 记录投资人并查看\r\n// 3. 在锁定期内，达到目标，生产商可以提款\r\n// 4. 在锁定期内，没有达到目标，投资人可以在锁定期以后退款cccc\r\n\r\ncontract FundMe {\r\n    mapping(address => uint256) public funds;\r\n    uint256 constant MININUM_VALUE = 100 * 10 ** 18; // 100 usd\r\n    uint256 public constant TARGET = 1000 * 10 ** 18;\r\n    address public owner;\r\n    AggregatorV3Interface public dataFeed;\r\n\r\n    uint256 deployTime;\r\n    uint lockTime;\r\n    address erc20Addr;\r\n    bool public isGetFund = false;\r\n\r\n    constructor(uint256 _lockTime, address _dataFeedAddr) {\r\n        owner = msg.sender;\r\n        dataFeed = AggregatorV3Interface(_dataFeedAddr);\r\n        deployTime = block.timestamp;\r\n        lockTime = _lockTime;\r\n    }\r\n\r\n    function fund() external payable {\r\n        require(block.timestamp < deployTime + lockTime, \"The fund is closed\");\r\n        require(convertEthToUsd(msg.value) >= MININUM_VALUE, \"send more money\");\r\n        funds[msg.sender] = msg.value;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getFund() external onlyOwner {\r\n        require(\r\n            block.timestamp > deployTime + lockTime,\r\n            \"It's not extraction time yet\"\r\n        );\r\n        require(\r\n            convertEthToUsd(address(this).balance) >= TARGET,\r\n            \"Target is not reached\"\r\n        );\r\n        // transfer : transfer ETH and revert if tx failed\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n\r\n        // send : send ETH and revert if tx failed\r\n        // bool status = payable(msg.sender).send(address(this).balance);\r\n        // require(status, \"tx failed\");\r\n\r\n        // call : transfer ETH with data return value of function and bool\r\n        bool status;\r\n        (status, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(status, \"tx failed\");\r\n        funds[msg.sender] = 0;\r\n        isGetFund = true;\r\n    }\r\n\r\n    function refund() external {\r\n        require(\r\n            block.timestamp > deployTime + lockTime,\r\n            \"It's not extraction time yet\"\r\n        );\r\n        require(\r\n            convertEthToUsd(address(this).balance) < TARGET,\r\n            \"Target is reached\"\r\n        );\r\n        require(funds[msg.sender] != 0, \"there is no fund to payback\");\r\n        bool status;\r\n        (status, ) = payable(msg.sender).call{value: funds[msg.sender]}(\"\");\r\n        funds[msg.sender] = 0;\r\n    }\r\n\r\n    function setFundsAmount(address funder, uint256 amountToUpdate) external {\r\n        require(\r\n            msg.sender == erc20Addr,\r\n            \"you do not have permission to call this function\"\r\n        );\r\n        funds[funder] = amountToUpdate;\r\n    }\r\n\r\n    function setErc20Addr(address _erc20Addr) external onlyOwner {\r\n        erc20Addr = _erc20Addr;\r\n    }\r\n\r\n    /**\r\n     * 通过预言机查看eth的价格\r\n     * Returns the latest answer.\r\n     */\r\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\r\n        // prettier-ignore\r\n        (\r\n            /* uint80 roundId */,\r\n            int256 answer,\r\n            /*uint256 startedAt*/,\r\n            /*uint256 updatedAt*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = dataFeed.latestRoundData();\r\n        return answer;\r\n    }\r\n\r\n    function convertEthToUsd(uint256 ethAmount) public view returns (uint256) {\r\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\r\n        return (ethAmount * ethPrice) / (10 ** 8);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"this function can only be called by the owner\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}